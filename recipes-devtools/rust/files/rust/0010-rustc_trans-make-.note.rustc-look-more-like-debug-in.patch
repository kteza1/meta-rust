From 04eee951641b9d9c580ee21c481bdf979dc2fe30 Mon Sep 17 00:00:00 2001
From: Steven Walter <swalter@lexmark.com>
Date: Tue, 7 Jul 2015 16:49:44 -0400
Subject: [PATCH 10/12] rustc_trans: make .note.rustc look more like debug info

Mark the global variable as const and private so the resulting section
is not flagged as writable and to avoid putting an unnecessary symbol in
the dynamic table of shared objects.

Unfortunately there doesn't seem to be a way to avoid the section being
marked SHF_ALLOC when declared as a variable in LLVM. Hack around that
by using objcopy to clear the flags on the section before the final
link.

This places the section at the end of the executable so it can be
stripped later without rearranging important code/data sections.
---
 mk/platform.mk                   |  1 +
 src/librustc/session/config.rs   |  2 ++
 src/librustc_back/target/mod.rs  |  4 ++++
 src/librustc_trans/back/link.rs  | 36 ++++++++++++++++++++++++++++++++++++
 src/librustc_trans/trans/base.rs |  3 +++
 5 files changed, 46 insertions(+)

diff --git a/mk/platform.mk b/mk/platform.mk
index 5239086..eb693b8 100644
--- a/mk/platform.mk
+++ b/mk/platform.mk
@@ -186,6 +186,7 @@ define CFG_MAKE_TOOLCHAIN
        AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))
        LINK_$(1)=$(CROSS_PREFIX_$(1))$(LINK_$(1))
        RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(LINK_$(1))) \
+           -C objcopy=$$(call FIND_COMPILER,$$(OBJCOPY_$(1))) \
            -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))
 
        RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))
diff --git a/src/librustc/session/config.rs b/src/librustc/session/config.rs
index 4cc059b..600cb4b 100644
--- a/src/librustc/session/config.rs
+++ b/src/librustc/session/config.rs
@@ -497,6 +497,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,
          CG_OPTIONS, cg_type_desc, cgsetters,
     ar: Option<String> = (None, parse_opt_string,
         "tool to assemble archives with"),
+    objcopy: Option<String> = (None, parse_opt_string,
+        "system objcopy for manipulating objects"),
     linker: Option<String> = (None, parse_opt_string,
         "system linker to link outputs with"),
     link_args: Option<Vec<String>> = (None, parse_opt_list,
diff --git a/src/librustc_back/target/mod.rs b/src/librustc_back/target/mod.rs
index 636a1aa..1b87a7a 100644
--- a/src/librustc_back/target/mod.rs
+++ b/src/librustc_back/target/mod.rs
@@ -118,6 +118,8 @@ pub struct TargetOptions {
     /// Linker arguments that are unconditionally passed *after* any
     /// user-defined libraries.
     pub post_link_args: Vec<String>,
+    /// Path to objcopy.  Defaults to "objcopy".
+    pub objcopy: String,
 
     /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults
     /// to "default".
@@ -213,6 +215,7 @@ impl Default for TargetOptions {
             ar: option_env!("CFG_DEFAULT_AR").unwrap_or("ar").to_string(),
             pre_link_args: Vec::new(),
             post_link_args: Vec::new(),
+            objcopy: "objcopy".to_string(),
             cpu: "generic".to_string(),
             features: "".to_string(),
             dynamic_linking: false,
@@ -331,6 +334,7 @@ impl Target {
         key!(cpu);
         key!(ar);
         key!(linker);
+        key!(objcopy);
         key!(relocation_model);
         key!(code_model);
         key!(dll_prefix);
diff --git a/src/librustc_trans/back/link.rs b/src/librustc_trans/back/link.rs
index 4e7150e..0d8a125 100644
--- a/src/librustc_trans/back/link.rs
+++ b/src/librustc_trans/back/link.rs
@@ -394,6 +394,13 @@ fn command_path(sess: &Session) -> OsString {
     env::join_paths(new_path).unwrap()
 }
 
+pub fn get_objcopy_prog(sess: &Session) -> String {
+    match sess.opts.cg.objcopy {
+        Some(ref objcopy) => return objcopy.to_string(),
+        None => sess.target.target.options.objcopy.clone(),
+    }
+}
+
 pub fn remove(sess: &Session, path: &Path) {
     match fs::remove_file(path) {
         Ok(..) => {}
@@ -928,6 +935,32 @@ fn link_natively(sess: &Session, dylib: bool,
     }
 }
 
+fn fix_meta_section_attributes(sess: &Session, meta_name: &PathBuf) {
+    // First, fix up the note section attributes.  We want the SHF_ALLOC and
+    // SHF_WRITE flags to be unset so the section will get placed near the
+    // end along with the debug info.  This allows the section to be
+    // stripped later without renumbering important sections that
+    // contain code and data.
+    let objcopy = get_objcopy_prog(sess);
+    let mut o_cmd = Command::new(&objcopy);
+    o_cmd.arg("--rename-section")
+         .arg(".note.rustc=.note.rustc,contents,noload,readonly")
+         .arg(&meta_name);
+    // Invoke objcopy
+    info!("{:?}", o_cmd);
+    match o_cmd.status() {
+        Ok(exitstatus) => {
+            if !exitstatus.success() {
+                sess.err(&format!("objcopy failed with exit code {:?}", exitstatus.code()));
+            }
+        },
+        Err(exitstatus) => {
+            sess.err(&format!("objcopy failed: {}", exitstatus));
+        }
+    }
+    sess.abort_if_errors();
+}
+
 fn link_args(cmd: &mut Linker,
              sess: &Session,
              dylib: bool,
@@ -960,6 +993,9 @@ fn link_args(cmd: &mut Linker,
     // executable. This metadata is in a separate object file from the main
     // object file, so we link that in here.
     if dylib {
+        let meta_name = outputs.with_extension("metadata.o");
+
+        fix_meta_section_attributes(sess, &meta_name);
         cmd.add_object(&outputs.with_extension("metadata.o"));
     }
 
diff --git a/src/librustc_trans/trans/base.rs b/src/librustc_trans/trans/base.rs
index 4c619f8..2b68767 100644
--- a/src/librustc_trans/trans/base.rs
+++ b/src/librustc_trans/trans/base.rs
@@ -2924,6 +2924,9 @@ pub fn write_metadata<'a, 'tcx>(cx: &SharedCrateContext<'a, 'tcx>,
     };
     unsafe {
         llvm::LLVMSetInitializer(llglobal, llconst);
+        llvm::LLVMSetGlobalConstant(llglobal, llvm::True);
+        llvm::LLVMSetUnnamedAddr(llglobal, llvm::True);
+        llvm::SetLinkage(llglobal, llvm::Linkage::PrivateLinkage);
         let name =
             cx.tcx().sess.cstore.metadata_section_name(&cx.sess().target.target);
         let name = CString::new(name).unwrap();
-- 
1.9.1

